(()=>{"use strict";const t=class{ID="";name="";description="";dueDate="";priority="";projectID="";done="";constructor(t,e,s,n,i,o,a=!1){this.ID=t,this.name=e,this.description=s,this.dueDate=n,this.priority=i,this.projectID=o,this.done=a}},e=class{ID="";name="";constructor(t,e,s=[]){this.ID=t,this.name=e,this.tasks=s}addTask(e,s,n,i){let o=0;if(0!=this.tasks.length){const t=this.tasks[this.tasks.length-1].ID,e=t.substring(t.lastIndexOf("-")+1);o=parseInt(e)}const a=`${ID}_task-${o+1}`,r=new t(a,e,s,n,i,ID);this.tasks.push(r)}updateTask(t){for(let e=0;e<this.tasks.length;e++)if(t.ID==this.tasks[e].ID){this.tasks[e].name=t.name,this.tasks[e].description=t.description,this.tasks[e].dueDate=t.dueDate,this.tasks[e].priority=t.priority,this.tasks[e].done=t.done;break}}removeTask(t){const e=this.tasks.filter((e=>t!=e.ID));this.tasks=e}},s=new class{constructor(){this.projectStorage=new class{constructor(){this.todoList=localStorage.getItem("TODO");var s=[];this.todoList&&(s=JSON.parse(this.todoList)),this.projects=[new e("project-1","Inbox")],0!=s.length&&this.projects.pop(),s.forEach((s=>{const n=[];s.tasks.forEach((e=>{n.push(new t(e.ID,e.name,e.description,e.dueDate,e.priority,e.projectID,e.done))})),this.projects.push(new e(s.ID,s.name,s.tasks))}))}allProjects(){return this.projects}addProject(t){this.projects.push(t),this.commit()}updateProject(t){for(let e=0;e<this.projects.length;e++)if(t.ID==this.projects[e].ID){this.projects[e].name=t.name,this.projects[e].tasks=t.tasks;break}this.commit()}removeProject(t){const e=this.projects.filter((e=>t!=e.ID));this.projects=e,this.commit()}commit(){localStorage.setItem("TODO",JSON.stringify(this.projects))}},this.projects=this.projectStorage.allProjects()}allProjects(){return this.projectStorage.allProjects()}findProject(t){var e=null;for(let s=0;s<this.projects.length;s++)t==this.projects[s].ID&&(e=this.projects[s]);return e}allTasks(){var e=[new t];return e.pop(),this.projectStorage.allProjects().forEach((t=>{e=Object.assign([],e,t.tasks)})),e}addProject(t){let s=0;if(0!=this.projects.length){const t=this.projects[this.projects.length-1].ID,e=t.substring(t.lastIndexOf("-")+1);s=parseInt(e)}const n=new e(`project-${s+1}`,t);this.projectStorage.addProject(n),this.projects=this.projectStorage.allProjects()}updateProject(t){this.projectStorage.updateProject(t),this.projects=this.projectStorage.allProjects()}removeProject(t){this.projectStorage.removeProject(t),this.projects=this.projectStorage.allProjects()}addTask(t,s,n,i,o){var a=new e;this.projects.forEach((e=>{t==e.ID&&(a=e)})),a.addTask(s,n,i,o),this.updateProject(a)}updateTask(t){var s=new e;this.projects.forEach((e=>{t.projectID==e.ID&&(s=e)})),s.updateTask(t),this.updateProject(s)}removeTask(t,s){var n=new e;this.projects.forEach((e=>{t==e.ID&&(n=e)})),n.removeTask(s),this.updateProject(n)}};new class{constructor(t,e){this.projectController=e,this.projectForm=t,this.sidebarContainer=document.createElement("div"),this.load(),this.sidebarContainer.classList.add("sidebar-container"),this.tasks=document.createElement("div"),this.tasks.classList.add("task-container"),this.sidebarContainer.appendChild(this.tasks),this.tasks.innerHTML='\n            <h2>Tasks</h2>\n            <div id="task-menu" class="nav-items"> \n                <button id="inbox-button" class="nav-item"><i class="fa-solid fa-inbox"></i>Inbox</button>\n                <button id="today-button" class="nav-item"><i class="fa-solid fa-calendar-day"></i>Today</button>\n                <button id="week-buttion" class="nav-item"><i class="fa-solid fa-calendar-week"></i>This Week</button>\n            </div>\n        ',this.projects=document.createElement("div"),this.projects.classList.add("project-container"),this.sidebarContainer.appendChild(this.projects),this.projects.innerHTML='\n            <h2>Projects</h2>\n            <div id="project-menu" class="nav-items"></div>\n            <button id="add-project" style="width:100%";><i class="fa-solid fa-plus"></i> Add project</button>\n        ',this.projectMenu=document.querySelector("#sidemenu #project-menu"),this.projectMenu&&e.allProjects().forEach((t=>{const e=document.createElement("button");"Inbox"!=t.name&&(e.innerHTML=`<i class="fa-solid fa-list-check"></i>${t.name}`,e.id=t.id,this.projectMenu.appendChild(e))})),this.addeventsListeners()}load(){document.querySelector("#sidemenu").appendChild(this.sidebarContainer)}addeventsListeners(){document.querySelector(".project-container button#add-project").addEventListener("click",(t=>{this.projectForm.open(0)}))}}(new class{constructor(t){this.mode={ADD:0,Edit:1},this.operation=0,this.projectController=t,this.container=document.createElement("div"),this.load(),this.container.id="project-form",this.container.classList.add("modal-container"),this.modal=document.createElement("div"),this.modal.classList.add("modal"),this.container.appendChild(this.modal),this.content=document.createElement("div"),this.content.classList.add("modal-content"),this.content.innerHTML='<h1 id="project-heading">Add new project</h1>',this.modal.appendChild(this.content),this.form=document.createElement("form"),this.form.autocomplete="off",this.content.append(this.form),this.form.innerHTML='\n            <label for="project-name">Project name</label>\n            <input type="text" id="project-name" minlentgth="3" maxlength="13S" required>\n            <div class="form-butttons">\n                <button id="cancelButton">Cancel</button>\n                <button type="submit" id="submitButton">Submit</button>\n            </div>\n        ',this.nameInput=document.querySelector("form input#project-name"),this.addEventsListeners()}load(){document.querySelector("#form-section").appendChild(this.container)}open(t,e=null){this.project=e,this.operation=t,document.querySelector("#project-form #project-heading").innerText=t==this.mode.ADD?"Add new project":"Edit project",this.container.style.display="block"}close(){this.clearFields(),this.container.style.display="none"}clearFields(){this.nameInput.value=""}addEventsListeners(){window.addEventListener("click",(t=>{t.target==this.modal&&this.close()})),document.querySelector("#project-form #cancelButton").addEventListener("click",(t=>{t.preventDefault(),this.close()})),this.form.onsubmit=t=>{const e=this.nameInput.value;this.operation==this.mode.ADD?this.projectController.addProject(e):(this.project.name=e,this.projectController.updateProject(this.project)),this.close()}}}(s),s),new class{constructor(){const t=document.querySelector("header");if(t){t.innerHTML='\n            <span></span>\n            <span class="site-name">ToDo List</span>\n            <button class="menu-button open-menu"><i class="fa-sharp fa-solid fa-bars"></i></button>\n            ';const e=document.querySelector("header .menu-button");if(e){const t=document.querySelector("#sidemenu");t&&e.addEventListener("click",(s=>{e.classList.contains("open-menu")?(t.style.display="block",e.classList.remove("open-menu"),e.classList.add("close-menu")):(t.style.display="none",e.classList.remove("close-menu"),e.classList.add("open-menu"),t.removeAttribute("style"))}))}}}},new class{constructor(t,e,s){this.project=e.findProject(s);const n=document.querySelector("main section#content");if(n&&this.project){n.innerHTML="",this.heading=document.createElement("h1"),n.appendChild(this.heading),this.heading.id=this.project.ID,this.heading.innerText=this.project.name;const e=document.createElement("div");e.classList.add("task-view"),n.appendChild(e),this.project.tasks.forEach((t=>{const s=document.createElement("div");e.appendChild(s);const n=document.createElement("input");n.setAttribute("type","text"),n.checked=t.done;const i=document.createElement("span");i.innerHTML=`<div class="task-name">${t.name}</div><div class="descrition">${t.description}</div>`;const o=document.createElement("span");o.classList.add("priority-color"),o.classList.add(t.priority);const a=document.createElement("span");a.classList.add("due-date"),a.innerText=t.dueDate;const r=document.createElement("button");r.innerHTML='<i class="fa-solid fa-pen-to-square"></i>';const c=document.createElement("button");c.innerHTML='<i class="fa-solid fa-trash-can"></i>',s.append(n,i,o,a,r,c)}));const s=document.createElement("button");n.append(s),s.classList.add("btn-add-task"),s.innerHTML='<i class="fa-solid fa-plus">&nbsp;</i>Add task',s.addEventListener("click",(e=>{t.open(0)}))}}}(new class{constructor(t){this.mode={ADD:0,Edit:1},this.projectController=t,this.operation=0,this.container=document.createElement("div"),this.container.id="task-form",this.container.classList.add("modal-container"),this.load(),this.modal=document.createElement("div"),this.modal.classList.add("modal"),this.container.appendChild(this.modal),this.content=document.createElement("div"),this.content.classList.add("modal-content"),this.content.innerHTML='<h1 id="task-heading">Add new task</h1>',this.modal.appendChild(this.content),this.form=document.createElement("form"),this.form.autocomplete="off",this.content.append(this.form),this.form.innerHTML='\n            <label for="task-name">Task name</label>\n            <input type="text" id="task-name" required>\n\n            <label for="task-description">Description <span class="optional">(Optional)</sapn></label>\n            <input type="text" id="task-description">\n\n            <label for="task-due-date">Due date</label>\n            <input type="date" id="task-due-date" required>\n\n            <label for="task-priority">Priority</label>\n            <select id="task-priority" required>\n               <option disabled selected></option>\n               <option value="low">Low</option> \n               <option value="medium">Medium</option>\n               <option value="high">High</option>\n            </select>\n            <div class="form-butttons">\n                <button id="cancelButton">Cancel</button>\n                <button type="submit" id="submitButton">Submit</button>\n            </div>\n        ',this.taskNameInput=document.querySelector("form input#task-name"),this.taskDescriptionInput=document.querySelector("form input#task-description"),this.taskDueDateInput=document.querySelector("form input#task-due-date"),this.taskPrioritySelect=document.querySelector("form select#task-priority"),this.addEventsListeners()}load(){document.querySelector("#form-section").appendChild(this.container)}open(t,e=null){this.task=e,this.operation=t,document.querySelector("#task-form #task-heading").innerText=t==this.mode.ADD?"Add new task":"Edit task",this.container.style.display="block"}close(){this.clearFields(),this.container.style.display="none"}clearFields(){this.taskNameInput.value="",this.taskDescriptionInput.value="",this.taskDueDateInput.value="",this.taskPrioritySelect.value=""}addEventsListeners(){window.addEventListener("click",(t=>{t.target==this.modal&&this.close()})),document.querySelector("#task-form #cancelButton").addEventListener("click",(t=>{t.preventDefault(),this.close()})),this.form.onsubmit=t=>{this.operation==this.mode.ADD?this.projectController.addTask(this.taskNameInput.value,this.taskDescriptionInput.value,this.taskDueDateInput.value,this.taskPrioritySelect.value):(this.task.name=this.taskNameInput.value,this.task.description=this.taskDescriptionInput.value,this.task.dueDate=this.taskDueDateInput.value,this.task.priority=this.taskPrioritySelect.value,this.projectController.updateTask(this.task)),this.close()}}}(s),s,"project-1")})();